mod adc;
mod add;
mod and;
mod bit;
mod call;
mod ccf;
mod cp;
mod cpl;
mod daa;
mod dec;
mod di;
mod ei;
mod halt;
mod inc;
mod jp;
mod jr;
mod ld;
mod ldd;
mod ldh;
mod ldi;
mod nop;
mod or;
mod pop;
mod push;
mod res;
mod ret;
mod reti;
mod rl;
mod rla;
mod rlc;
mod rlca;
mod rr;
mod rra;
mod rrc;
mod rrca;
mod rst;
mod sbc;
mod scf;
mod set;
mod sla;
mod sra;
mod srl;
mod stop;
mod sub;
mod swap;
mod xor;

pub use self::adc::AddCarry;
pub use self::add::Add;
pub use self::and::And;
pub use self::bit::Bit;
pub use self::call::Call;
pub use self::ccf::ComplementCarryFlag;
pub use self::cp::Compare;
pub use self::cpl::ComplementA;
pub use self::daa::DecimalAdjustA;
pub use self::dec::Decrease;
pub use self::di::DisableInterrupts;
pub use self::ei::EnableInterrupts;
pub use self::halt::Halt;
pub use self::inc::Increase;
pub use self::jp::Jump;
pub use self::jr::JumpRelative;
pub use self::ld::Load;
pub use self::ldd::LoadDecrease;
pub use self::ldh::LoadOffset;
pub use self::ldi::LoadIncrease;
pub use self::nop::Nop;
pub use self::or::Or;
pub use self::pop::Pop;
pub use self::push::Push;
pub use self::res::Reset;
pub use self::ret::Return;
pub use self::reti::ReturnEnableInterrupts;
pub use self::rl::RotateLeft;
pub use self::rla::RotateALeft;
pub use self::rlc::RotateLeftCarry;
pub use self::rlca::RotateALeftCarry;
pub use self::rr::RotateRight;
pub use self::rra::RotateARight;
pub use self::rrc::RotateRightCarry;
pub use self::rrca::RotateARightCarry;
pub use self::rst::Restart;
pub use self::sbc::SubtractCarry;
pub use self::scf::SetCarryFlag;
pub use self::set::Set;
pub use self::sla::ShiftLeftArithmetic;
pub use self::sra::ShiftRightArithmetic;
pub use self::srl::ShiftRightLogical;
pub use self::stop::Stop;
pub use self::sub::Subtract;
pub use self::swap::Swap;
pub use self::xor::Xor;

use instructions::Instruction;
use cpu::CPU;
use errors::*;

pub trait Execute {
    fn execute(instruction: &Instruction, cpu: &mut CPU) -> Result<()>;
}
